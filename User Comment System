// By Great Milad 

// comment model 

class Comment(db.Model):  
__tablename__ = 'comments'
id = db.Column(db.Integer, primary_key=True)   
body = db.Column(db.Text)  
body_html = db.Column(db.Text) 
timestamp = db.Column(db.DateTime, 
index=True, default=datetime.utcnow)   
disabled = db.Column(db.Boolean)  
author_id = db.Column(db.Integer, db.ForeignKey('users.id'))  
post_id = db.Column(db.Integer, db.ForeignKey('posts.id'))  
@staticmethod
def on_changed_body(target, value, oldvalue, initiator):     
allowed_tags = ['a', 'abbr', 'acronym', 'b', 'code', 'em', 'i', 'strong']     
target.body_html = bleach.linkify(bleach.clean(      
markdown(value, output_format='html'),    
tags=allowed_tags, strip=True))
db.event.listen(Comment.body, 'set', Comment.on_changed_body)


// One-to-many relationships from users and posts to comments

class User(db.Model):   
# ...    
comments = db.relationship('Comment', backref='author', lazy='dynamic')
class Post(db.Model):   
# ...   
comments = db.relationship('Comment', backref='post', lazy='dynamic')



// Comment input form

class CommentForm(Form):   
body = StringField('', validators=[Required()]) 
submit = SubmitField('Submit')


// Blog post comments support 

@main.route('/post/<int:id>', methods=['GET', 'POST'])
def post(id):  
post = Post.query.get_or_404(id) 
form = CommentForm() 
if form.validate_on_submit():    
comment = Comment(body=form.body.data,  
post=post,                         
author=current_user._get_current_object())   
db.session.add(comment)    
flash('Your comment has been published.')     
return redirect(url_for('.post', id=post.id, page=-1))   
page = request.args.get('page', 1, type=int) 
if page == -1:     
page = (post.comments.count() - 1) / \          
current_app.config['FLASKY_COMMENTS_PER_PAGE'] + 1  
pagination = post.comments.order_by(Comment.timestamp.asc()).paginate(  
page, per_page=current_app.config['FLASKY_COMMENTS_PER_PAGE'],     
error_out=False)   
comments = pagination.items  
return render_template('post.html', posts=[post], form=form,        
comments=comments, pagination=pagination)


// Link to blog post comments 

<a href="{{ url_for('.post', id=post.id) }}#comments">   
<span class="label label-primary">    
{{ post.comments.count() }} Comments    </span>
</a>


// Moderate comments link in navigation bar 

...
{% if current_user.can(Permission.MODERATE_COMMENTS) %}
<li><a href="{{ url_for('main.moderate') }}">Moderate Comments</a></li>
{% endif %}
...


// Comment moderation route 

@main.route('/moderate')
@login_required
@permission_required(Permission.MODERATE_COMMENTS)
def moderate():  
page = request.args.get('page', 1, type=int)  
pagination = Comment.query.order_by(Comment.timestamp.desc()).paginate(     
page, per_page=current_app.config['FLASKY_COMMENTS_PER_PAGE'],       
error_out=False)  
comments = pagination.items    
return render_template('moderate.html', comments=comments,       
pagination=pagination, page=page)


// Comment moderation template 

{% extends "base.html" %}
{% import "_macros.html" as macros %}{% block title %}
Flasky - Comment Moderation{% endblock %}
{% block page_content %}
<div class="page-header">   
<h1>Comment Moderation</h1>
</div>{% set moderate = True %}
{% include '_comments.html' %}
{% if pagination %}<div class="pagination">   
{{ macros.pagination_widget(pagination, '.moderate') }}
</div>
{% endif %}
{% endblock %}


//  Rendering of the comment bodies 

...
<div class="comment-body">  
{% if comment.disabled %}  
<p></p><i>This comment has been disabled by a moderator.</i></p>  
{% endif %}   
{% if moderate or not comment.disabled %}  
{% if comment.body_html %}       
{{ comment.body_html | safe }}     
{% else %}           
{{ comment.body }}    
{% endif %}   
{% endif %}</div>{% if moderate %}    <br>   
{% if comment.disabled %}   
<a class="btn btn-default btn-xs" href="{{ url_for('.moderate_enable',     
id=comment.id, page=page) }}">Enable</a>  
{% else %}  
<a class="btn btn-danger btn-xs" href="{{ url_for('.moderate_disable',    
id=comment.id, page=page) }}">Disable</a>   
{% endif %}
{% endif %}
...


// Comment moderation routes

@main.route('/moderate/enable/<int:id>')
@login_required
@permission_required(Permission.MODERATE_COMMENTS)
def moderate_enable(id):   
comment = Comment.query.get_or_404(id)  
comment.disabled = False 
db.session.add(comment)   
return redirect(url_for('.moderate',   
page=request.args.get('page', 1, type=int)))
@main.route('/moderate/disable/<int:id>')
@login_required@permission_required(Permission.MODERATE_COMMENTS)
def moderate_disable(id):   
comment = Comment.query.get_or_404(id)   
comment.disabled = True   
db.session.add(comment)   
return redirect(url_for('.moderate',    
page=request.args.get('page', 1, type=int)))

// By Great Milad
